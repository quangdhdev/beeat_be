
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.13.0
 * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
 */
Prisma.prismaVersion = {
  client: "6.13.0",
  engine: "361e86d0ea4987e9f53a565309b3eed797a6bcbd"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  fullName: 'fullName',
  phone: 'phone',
  bio: 'bio',
  avatar: 'avatar',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastLoginAt: 'lastLoginAt'
};

exports.Prisma.UserPreferencesScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  language: 'language',
  timezone: 'timezone',
  emailNotifications: 'emailNotifications',
  courseUpdateNotifications: 'courseUpdateNotifications',
  promotionNotifications: 'promotionNotifications',
  weeklyDigestNotifications: 'weeklyDigestNotifications'
};

exports.Prisma.InstructorScalarFieldEnum = {
  id: 'id',
  name: 'name',
  bio: 'bio',
  avatar: 'avatar',
  rating: 'rating',
  studentsCount: 'studentsCount',
  createdAt: 'createdAt'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  createdAt: 'createdAt'
};

exports.Prisma.CourseScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  longDescription: 'longDescription',
  thumbnail: 'thumbnail',
  price: 'price',
  originalPrice: 'originalPrice',
  rating: 'rating',
  studentsCount: 'studentsCount',
  duration: 'duration',
  level: 'level',
  language: 'language',
  lastUpdated: 'lastUpdated',
  totalLessons: 'totalLessons',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  instructorId: 'instructorId',
  categoryId: 'categoryId'
};

exports.Prisma.CourseSectionScalarFieldEnum = {
  id: 'id',
  title: 'title',
  order: 'order',
  courseId: 'courseId'
};

exports.Prisma.LessonScalarFieldEnum = {
  id: 'id',
  title: 'title',
  duration: 'duration',
  isPreview: 'isPreview',
  videoUrl: 'videoUrl',
  order: 'order',
  sectionId: 'sectionId'
};

exports.Prisma.LessonResourceScalarFieldEnum = {
  id: 'id',
  title: 'title',
  url: 'url',
  type: 'type',
  lessonId: 'lessonId'
};

exports.Prisma.CourseSkillScalarFieldEnum = {
  id: 'id',
  skill: 'skill',
  courseId: 'courseId'
};

exports.Prisma.CourseRequirementScalarFieldEnum = {
  id: 'id',
  requirement: 'requirement',
  courseId: 'courseId'
};

exports.Prisma.CourseEnrollmentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  courseId: 'courseId',
  enrolledAt: 'enrolledAt',
  completedAt: 'completedAt',
  certificateEarned: 'certificateEarned',
  certificateUrl: 'certificateUrl'
};

exports.Prisma.LessonProgressScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  lessonId: 'lessonId',
  completed: 'completed',
  completedAt: 'completedAt',
  timeSpent: 'timeSpent',
  watchedDuration: 'watchedDuration',
  lastAccessedAt: 'lastAccessedAt'
};

exports.Prisma.CartItemScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  courseId: 'courseId',
  quantity: 'quantity',
  addedAt: 'addedAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  amount: 'amount',
  currency: 'currency',
  status: 'status',
  paymentMethod: 'paymentMethod',
  stripePaymentIntentId: 'stripePaymentIntentId',
  createdAt: 'createdAt',
  paidAt: 'paidAt'
};

exports.Prisma.BillingAddressScalarFieldEnum = {
  id: 'id',
  paymentId: 'paymentId',
  fullName: 'fullName',
  email: 'email',
  address: 'address',
  city: 'city',
  zipCode: 'zipCode'
};

exports.Prisma.PaymentOrderItemScalarFieldEnum = {
  id: 'id',
  paymentId: 'paymentId',
  courseId: 'courseId',
  price: 'price',
  quantity: 'quantity'
};

exports.Prisma.CourseAnalyticsScalarFieldEnum = {
  id: 'id',
  courseId: 'courseId',
  userId: 'userId',
  viewedAt: 'viewedAt',
  source: 'source',
  referrer: 'referrer',
  ipAddress: 'ipAddress'
};

exports.Prisma.UserAnalyticsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  totalTimeSpent: 'totalTimeSpent',
  coursesCompleted: 'coursesCompleted',
  lessonsCompleted: 'lessonsCompleted',
  certificatesEarned: 'certificatesEarned',
  currentStreak: 'currentStreak',
  longestStreak: 'longestStreak',
  dailyGoalMinutes: 'dailyGoalMinutes',
  weeklyGoalMinutes: 'weeklyGoalMinutes',
  lastUpdated: 'lastUpdated'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.CourseLevel = exports.$Enums.CourseLevel = {
  BEGINNER: 'BEGINNER',
  INTERMEDIATE: 'INTERMEDIATE',
  ADVANCED: 'ADVANCED'
};

exports.ResourceType = exports.$Enums.ResourceType = {
  PDF: 'PDF',
  VIDEO: 'VIDEO',
  LINK: 'LINK',
  DOCUMENT: 'DOCUMENT'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  SUCCEEDED: 'SUCCEEDED',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED'
};

exports.Prisma.ModelName = {
  User: 'User',
  UserPreferences: 'UserPreferences',
  Instructor: 'Instructor',
  Category: 'Category',
  Course: 'Course',
  CourseSection: 'CourseSection',
  Lesson: 'Lesson',
  LessonResource: 'LessonResource',
  CourseSkill: 'CourseSkill',
  CourseRequirement: 'CourseRequirement',
  CourseEnrollment: 'CourseEnrollment',
  LessonProgress: 'LessonProgress',
  CartItem: 'CartItem',
  Payment: 'Payment',
  BillingAddress: 'BillingAddress',
  PaymentOrderItem: 'PaymentOrderItem',
  CourseAnalytics: 'CourseAnalytics',
  UserAnalytics: 'UserAnalytics'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
